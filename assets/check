#!/bin/bash

set -Eeuo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload="/tmp/vault-resource-request"

cat > "$payload" <&0

url=$(jq --raw-output '.source.url // ""' < "$payload")
role_id=$(jq --raw-output '.source.role_id // ""' < "$payload")
secret_id=$(jq --raw-output '.source.secret_id // ""' < "$payload")
path=$(jq --raw-output '.source.path // ""' < "$payload")
versioned=$(jq --raw-output '.source.versioned // "false"' < "$payload")

fail=false
if [ -z "$url" ]; then
  echo "invalid payload (missing url)"
  fail=true
fi

if [ -z "$role_id" ]; then
  echo "invalid payload (missing role_id)"
  fail=true
fi

if [ -z "$secret_id" ]; then
  echo "invalid payload (missing secret_id)"
  fail=true
fi

if [ -z "$path" ]; then
  echo "invalid payload (missing path)"
  fail=true
fi

if [ "$fail" = "true" ]; then
  exit 1
fi

export VAULT_ADDR="$url"
export VAULT_FORMAT="json"

token="$(
  vault write auth/approle/login role_id="$role_id" secret_id="$secret_id" | \
    jq --raw-output .auth.client_token
)"
vault login "$token"

function cleanup {
    vault token revoke -self
}
trap cleanup EXIT

# If versioned is set then read kv engine v2
if [ "$versioned" = true ]; then
  version="$(vault kv get "$path" | jq --join-output .data.metadata.version)"
else
  version="$(vault kv get "$path" | jq .data | sha256sum | awk '{print $1}')"
fi

# Convert to an array
echo '{"id": "'"$version"'"}' | jq --slurp . >&3
